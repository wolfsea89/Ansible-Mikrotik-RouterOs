---
- name: "Create {{ vars_role_tmp_ssl_dir }} directory if it does not exist"
  file:
    path: "{{ vars_role_tmp_ssl_dir }}"
    state: directory
    recurse: yes

- name: Create server.crt file from variable
  copy:
    content: "{{ input_role_server_certificates.crt }}"
    dest:    "{{ vars_role_tmp_ssl_dir }}/ssl.crt"
    mode: 0644
  register: server_crt_status

- name: "[DEBUG] Create server.crt status"
  debug:
    msg: "{{ server_crt_status }}"
  when:
    - input_role_debug == true

- name: Create server.key file from variable
  copy:
    content: "{{ input_role_server_certificates.key }}"
    dest:    "{{ vars_role_tmp_ssl_dir }}/ssl.key"
    mode: 0644
  register: server_key_status

- name: "[DEBUG] Create server.key status"
  debug:
    msg: "{{ server_key_status }}"
  when:
    - input_role_debug == true

- name: Upload server.crt from local storage
  action: command sshpass -p "{{ input_role_ansible_password }}" scp "{{ vars_role_tmp_ssl_dir }}/ssl.crt" {{ ansible_user }}@{{ ansible_host }}:ssl.crt
  register: server_crt_upload_status

- name: "[DEBUG] Upload server.crt status"
  debug:
    msg: "{{ server_crt_upload_status }}"
  when:
    - input_role_debug == true

- name: Upload server.key from local storage
  action: command sshpass -p "{{ input_role_ansible_password }}" scp "{{ vars_role_tmp_ssl_dir }}/ssl.key" {{ ansible_user }}@{{ ansible_host }}:ssl.key
  register: server_key_upload_status

- name: "[DEBUG] Upload server.key status"
  debug:
    msg: "{{ server_key_upload_status }}"
  when:
    - input_role_debug == true

- name: "Remove {{ vars_role_tmp_ssl_dir }}"
  file:
    path: "{{ vars_role_tmp_ssl_dir }}"
    state: absent

- name: "[DEBUG] RouterOs Commands"
  debug:
    msg:
      - /certificate import file-name=ssl.crt name="{{ input_role_server_certificates.name }}" passphrase="{{ input_role_server_certificates.passphrase }}"
      - /certificate import file-name=ssl.key name="{{ input_role_server_certificates.name }}" passphrase="{{ input_role_server_certificates.passphrase }}"
  # when: input_role_debug == true

- name: Import certificate SSL
  routeros_command:
    commands: /certificate import file-name=ssl.crt name="{{ input_role_server_certificates.name }}" passphrase="{{ input_role_server_certificates.passphrase }}"
  register:  server_crt_import_status

- name: "[DEBUG] Import certificate SSL status"
  debug:
    msg: "{{ server_key_upload_status }}"
  when:
    - input_role_debug == true

- name: Import private key SSL
  routeros_command:
    commands: /certificate import file-name=ssl.key name="{{ input_role_server_certificates.name }}" passphrase="{{ input_role_server_certificates.passphrase }}"
  register:  server_key_import_status

- name: "[DEBUG] Import private key SSL status"
  debug:
    msg: "{{ server_key_import_status }}"
  when:
    - input_role_debug == true